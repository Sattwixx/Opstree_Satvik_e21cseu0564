# -*- coding: utf-8 -*-
"""Opstree_Satvik_E21CSEU0564.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zQd0lJgc0CJnrJEFknc6cufVimAdTY_G
"""

class ListNode:
    def __init__(self, value=0, next=None):
        self.value = value
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, value):
        new_node = ListNode(value)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def to_list(self):
        elements = []
        current = self.head
        while current:
            elements.append(current.value)
            current = current.next
        return elements

    def print_list(self):
        elements = self.to_list()
        print(" -> ".join(map(str, elements)))

def add_linked_lists(l1, l2):
    dummy_head = ListNode()
    current = dummy_head
    carry = 0

    while l1 or l2 or carry:
        val1 = l1.value if l1 else 0
        val2 = l2.value if l2 else 0

        total = val1 + val2 + carry
        carry = total // 10
        current.next = ListNode(total % 10)
        current = current.next

        if l1: l1 = l1.next
        if l2: l2 = l2.next

    return dummy_head.next

def subtract_linked_lists(l1, l2):
    dummy_head = ListNode()
    current = dummy_head
    borrow = 0

    while l1 or l2:
        val1 = l1.value if l1 else 0
        val2 = l2.value if l2 else 0

        difference = val1 - borrow - val2
        if difference < 0:
            difference += 10
            borrow = 1
        else:
            borrow = 0

        current.next = ListNode(difference)
        current = current.next

        if l1: l1 = l1.next
        if l2: l2 = l2.next

    return dummy_head.next

def multiply_linked_lists(l1, l2):
    num1 = 0
    num2 = 0

    while l1:
        num1 = num1 * 10 + l1.value
        l1 = l1.next

    while l2:
        num2 = num2 * 10 + l2.value
        l2 = l2.next

    product = num1 * num2

    dummy_head = ListNode()
    current = dummy_head

    if product == 0:
        return ListNode(0)

    while product:
        current.next = ListNode(product % 10)
        product //= 10
        current = current.next

    return reverse_linked_list(dummy_head.next)

def reverse_linked_list(head):
    prev = None
    current = head

    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node

    return prev

def create_linked_list_from_number(num):
    ll = LinkedList()
    for digit in str(num):
        ll.insert(int(digit))
    return ll.head

# Example:
num1 = 123
num2 = 456

l1 = create_linked_list_from_number(num1)
l2 = create_linked_list_from_number(num2)


ll1 = LinkedList()
ll1.head = l1
print("First number as linked list:")
ll1.print_list()

ll2 = LinkedList()
ll2.head = l2
print("Second number as linked list:")
ll2.print_list()


result_add = add_linked_lists(l1, l2)
ll_result_add = LinkedList()
ll_result_add.head = result_add
print("Addition result as linked list:")
ll_result_add.print_list()


result_sub = subtract_linked_lists(l1, l2)
ll_result_sub = LinkedList()
ll_result_sub.head = result_sub
print("Subtraction result as linked list:")
ll_result_sub.print_list()


result_mul = multiply_linked_lists(l1, l2)
ll_result_mul = LinkedList()
ll_result_mul.head = result_mul
print("Multiplication result as linked list:")
ll_result_mul.print_list()

